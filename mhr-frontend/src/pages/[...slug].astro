---

import { config as payloadConfig } from 'mhr-payload'
import { getPayload, type RequiredDataFromCollectionSlug } from 'payload'

import Layout from '../layouts/Layout.astro'
import { generateMeta } from 'src/utilities/generateMeta'

import RenderHero from '../components/RenderHero.astro'
import RenderBlocks from '../components/RenderBlocks.astro'

// TODO: post redirects, 
// find solution for urls
// Organize files
// live preview, 
// draft mode, 
// rebuild media compnenets in astro  to use astro native img/video 

export async function getStaticPaths() {
    const payload = await getPayload({ config: payloadConfig })
    const pages = await payload.find({
        collection: 'pages',
        draft: false,
        limit: 1000,
        overrideAccess: false,
        pagination: false,
        select: {
            slug: true,
        }
    })
    
    const params = pages.docs?.map(({ slug }) => {
        if (slug === 'home')
            return { params: {slug: undefined } }
        return { params: { slug } }
    })

    return params
}

let page: RequiredDataFromCollectionSlug<'pages'> | null = null

const queryPageBySlug = async ( slug: string ) => {
    if (page) return page
    const payload = await getPayload({ config: payloadConfig })
    const result = await payload.find({
        collection: 'pages',
        limit: 1,
        pagination: false,
        overrideAccess: false,
        where: {
            slug: {
                equals: slug,
            },
        },
    })

    return result.docs?.[0] || null
}

const slug: string = Astro.params.slug ?? 'home';

page = await queryPageBySlug( slug )

const { hero, layout } = page
const {description, openGraph, title} = await generateMeta({doc: page})

 ---

<Layout useTransitions={false} description={description} openGraph={openGraph} title={title}>
	<RenderHero {...hero} />
    <RenderBlocks blocks={layout} />
</Layout>