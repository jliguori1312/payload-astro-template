---
import type { Post, ArchiveBlock as ArchiveBlockProps } from 'app-payload/types'

import { getPayloadConfig } from '#config'
import { getPayload } from 'payload'
import React from 'react'
import RichText from '#components/react/RichText/index.jsx'

import CollectionArchive from '#components/astro/CollectionArchive.astro'

const { id, categories, introContent, limit: limitFromProps, populateBy, selectedDocs } = Astro.props as
  ArchiveBlockProps & {
    id?: string
  }

  const limit = limitFromProps || 3

  let posts: Post[] = []

  if (populateBy === 'collection') {
    const payload = await getPayload({ config: getPayloadConfig() })

    const flattenedCategories = categories?.map((category) => {
      if (typeof category === 'object') return category.id
      else return category
    })

    const fetchedPosts = await payload.find({
      collection: 'posts',
      depth: 1,
      limit,
      ...(flattenedCategories && flattenedCategories.length > 0
        ? {
            where: {
              categories: {
                in: flattenedCategories,
              },
            },
          }
        : {}),
    })

    posts = fetchedPosts.docs
  } else {
    if (selectedDocs?.length) {
      const filteredSelectedPosts = selectedDocs.map((post) => {
        if (typeof post.value === 'object') return post.value
      }) as Post[]

      posts = filteredSelectedPosts
    }
  }

---

<div class="my-16" id={`block-${id}`}>
    {introContent && (
        <div class="container mb-16">
            <RichText className="ms-0 max-w-[48rem]" data={introContent} enableGutter={false} />
        </div>
    )}
    <CollectionArchive posts={posts} />
</div>